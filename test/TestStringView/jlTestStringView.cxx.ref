// this file was auto-generated by wrapit v1.0.0-19-gb4c430f-dirty
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlTestStringView.h"
#include "dbg_msg.h"
#include "Wrapper.h"
struct JlGlobal: public Wrapper {

  JlGlobal(jlcxx::Module& jlModule): Wrapper(jlModule){
  }

  void add_methods() const{
    auto& t = module_;

    DEBUG_MSG("Adding wrapper for size_t f(const std::string_view &) (" __HERE__ ")");
    // signature to use in the veto list: size_t f(const std::string_view &)
    // defined in ./A.h:6:8
    t.method("f", [](const char* arg0)->size_t{ return f(arg0); });
  }
};
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlGlobal(module));
}

class JlGlobal;

std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module&);


JLCXX_MODULE define_julia_module(jlcxx::Module& jlModule){
  std::vector<std::shared_ptr<Wrapper>> wrappers = {
    std::shared_ptr<Wrapper>(newJlGlobal(jlModule))
  };
  for(const auto& w: wrappers) w->add_methods();

}
