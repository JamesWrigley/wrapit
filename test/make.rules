# Variable to define:
# MODULE_NAME: Julia module name. It needs to match with the .wit file base name.
# EXTRA_OBJS: in presence of c++ files to compile and link into the shared library other than the ones generated by wrapit. 

JL_SHARE = $(shell julia -e 'print(joinpath(Sys.BINDIR, Base.DATAROOTDIR, "julia"))')
CXXFLAGS += $(patsubst -std=gnu%,,$(shell $(JL_SHARE)/julia-config.jl --cflags))
LDFLAGS  += $(shell $(JL_SHARE)/julia-config.jl --ldflags)
LDLIBS   += $(shell $(JL_SHARE)/julia-config.jl --ldlibs)

CXXWRAP_CPPFLAGS=-I $(shell julia -e 'using CxxWrap; print(CxxWrap.prefix_path() * "/include")') -std=c++20
CXXFLAGS += -Wno-unused-variable -Wno-unused-but-set-variable -fmax-errors=3 -I.

CPPFLAGS += -MMD
WRAPIT_VERBOSITY=0

LINK.o = $(CXX) $(LDFLAGS) $(TARGET_ARCH)

.PHONY: all clean test

.PRECIOUS: $(PRODUCTS)

CXX_PRODUCTS=$(addprefix lib$(MODULE_NAME)/src/, jl$(MODULE_NAME).cxx)
OBJS=$(patsubst lib$(MODULE_NAME)/src/%,lib$(MODULE_NAME)/build/%, $(addsuffix .o, $(basename $(CXX_PRODUCTS)))) $(EXTRA_OBJS)
DEPS=$(patsubst %.o,%.d, $(OBJS))

PRODUCTS=lib$(MODULE_NAME)/libjl$(MODULE_NAME).so $(CXX_PRODUCTS) $(addprefix lib$(MODULE_NAME)/src/, jl$(MODULE_NAME).h) $(MODULE_NAME)/src/$(MODULE_NAME).jl

all: $(PRODUCTS)

clean:
	-$(RM) $(PRODUCTS) -r lib$(MODULE_NAME)/build jl$(MODULE_NAME)-report.txt $(OBJS) $(DEPS)
	[ -d lib$(MODULE_NAME)/src ] && cd lib$(MODULE_NAME)/src && $(RM) $(file < lib$(MODULE_NAME)/src/generated_cxx) dbg_msg.h  generated_cxx  Wrapper.h || true
	-rmdir -p lib$(MODULE_NAME)/src $(MODULE_NAME)/src 2>/dev/null || true

lib$(MODULE_NAME)/src/jl%.cxx: %.wit $(WRAPIT_INPUTS)
	wrapit -v $(WRAPIT_VERBOSITY) --force $<

lib$(MODULE_NAME)/build/%.o: lib$(MODULE_NAME)/src/%.cxx
	[ -d lib$(MODULE_NAME)/build ] || mkdir lib$(MODULE_NAME)/build
	$(COMPILE.cc) $(CXXWRAP_CPPFLAGS) -o $@ $<

lib$(MODULE_NAME)/libjl%.so: $(OBJS)
	$(LINK.o) -o $@ --shared -fPIC $^
	touch $(MODULE_NAME)/src/$(MODULE_NAME).jl

echo_%:
	 @echo $*=$($*)

test:
	$(MAKE) all && . ./setup.sh && julia run$(MODULE_NAME).jl

-include $(DEPS)

