#include <type_traits>
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlTestNoFinalizer.h"

#ifdef VERBOSE_IMPORT
#  define DEBUG_MSG(a) std::cerr << a << "\n"
#else
#  define DEBUG_MSG(a)
#endif
#define __HERE__  __FILE__ ":" QUOTE2(__LINE__)
#define QUOTE(arg) #arg
#define QUOTE2(arg) QUOTE(arg)

namespace jlcxx {
  template<> struct IsMirroredType<A> : std::false_type { };
  template<> struct IsMirroredType<B> : std::false_type { };
  template<> struct IsMirroredType<C> : std::false_type { };
  template<> struct IsMirroredType<D> : std::false_type { };
  template<> struct IsMirroredType<E> : std::false_type { };

  template <> struct DefaultConstructible<A> : std::bool_constant<false> { };
  template <> struct DefaultConstructible<B> : std::bool_constant<false> { };
  template <> struct DefaultConstructible<C> : std::bool_constant<false> { };
  template <> struct DefaultConstructible<D> : std::bool_constant<false> { };
  template <> struct DefaultConstructible<E> : std::bool_constant<false> { };

}

JLCXX_MODULE define_julia_module(jlcxx::Module& types){

  DEBUG_MSG("Adding wrapper for type A (" __HERE__ ")");
  // defined in ./A.h:3:8
  auto t0 = types.add_type<A>("A");

  DEBUG_MSG("Adding wrapper for type B (" __HERE__ ")");
  // defined in ./A.h:13:8
  auto t1 = types.add_type<B>("B");

  DEBUG_MSG("Adding wrapper for type C (" __HERE__ ")");
  // defined in ./A.h:21:8
  auto t2 = types.add_type<C>("C");

  DEBUG_MSG("Adding wrapper for type D (" __HERE__ ")");
  // defined in ./A.h:31:8
  auto t3 = types.add_type<D>("D");

  DEBUG_MSG("Adding wrapper for type E (" __HERE__ ")");
  // defined in ./A.h:40:8
  auto t4 = types.add_type<E>("E");

  /**********************************************************************/
  /* Wrappers for the methods of class A
   */


  DEBUG_MSG("Adding wrapper for void A::A() (" __HERE__ ")");
  // defined in ./A.h:5:3
  t0.constructor<>();

  /* End of A class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class B
   */


  DEBUG_MSG("Adding wrapper for void B::B() (" __HERE__ ")");
  // defined in ./A.h:5:3
  t1.constructor<>(false);

  /* End of B class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class C
   */


  DEBUG_MSG("Adding wrapper for void C::C() (" __HERE__ ")");
  // defined in ./A.h:23:3
  t2.constructor<>(false);

  /* End of C class method wrappers
   **********************************************************************/


  /**********************************************************************/
  /* Wrappers for the methods of class D
   */


  DEBUG_MSG("Adding wrapper for void D::D() (" __HERE__ ")");
  // defined in ./A.h
  t3.constructor<>(false);

  /* End of C class method wrappers
   **********************************************************************/

  /**********************************************************************/
  /* Wrappers for the methods of class C
   */


  DEBUG_MSG("Adding wrapper for void E::E() (" __HERE__ ")");
  // defined in ./A.h
  t4.constructor<>(false);

  /* End of C class method wrappers
   **********************************************************************/


  
  /**********************************************************************
   * Wrappers for global functions and variables including
   * class static members
   */

  DEBUG_MSG("Adding A!dtor_ncalls methods to provide access to the global variable A::dtor_ncalls (" __HERE__ ")");
  // defined in ./A.h:4:14
  types.method("A!dtor_ncalls", []()-> int { return A::dtor_ncalls; });
  types.method("A!dtor_ncalls!", [](int val)-> int { return A::dtor_ncalls = val; });

  DEBUG_MSG("Adding B!dtor_ncalls methods to provide access to the global variable B::dtor_ncalls (" __HERE__ ")");
  // defined in ./A.h:14:14
  types.method("B!dtor_ncalls", []()-> int { return B::dtor_ncalls; });
  types.method("B!dtor_ncalls!", [](int val)-> int { return B::dtor_ncalls = val; });

  DEBUG_MSG("Adding C!dtor_ncalls methods to provide access to the global variable C::dtor_ncalls (" __HERE__ ")");
  // defined in ./A.h:22:14
  types.method("C!dtor_ncalls", []()-> int { return C::dtor_ncalls; });
  types.method("C!dtor_ncalls!", [](int val)-> int { return C::dtor_ncalls = val; });

  DEBUG_MSG("Adding D!dtor_ncalls methods to provide access to the global variable D::dtor_ncalls (" __HERE__ ")");
  // defined in ./A.h:32:14
  types.method("D!dtor_ncalls", []()-> int { return D::dtor_ncalls; });
  types.method("D!dtor_ncalls!", [](int val)-> int { return D::dtor_ncalls = val; });

  DEBUG_MSG("Adding E!dtor_ncalls methods to provide access to the global variable E::dtor_ncalls (" __HERE__ ")");
  // defined in ./A.h:41:14
  types.method("E!dtor_ncalls", []()-> int { return E::dtor_ncalls; });
  types.method("E!dtor_ncalls!", [](int val)-> int { return E::dtor_ncalls = val; });
  /* End of global function wrappers
   **********************************************************************/

  DEBUG_MSG("End of wrapper definitions");

}
